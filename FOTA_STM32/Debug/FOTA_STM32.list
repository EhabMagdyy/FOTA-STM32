
FOTA_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa0  08002fa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fa8  08002fa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002fbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002fbc  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000096ef  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d3  00000000  00000000  0002976e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0002b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b9  00000000  00000000  0002c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016451  00000000  00000000  0002c7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c417  00000000  00000000  00042c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085a52  00000000  00000000  0004f061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002234  00000000  00000000  000d4ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d6ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f70 	.word	0x08002f70

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f70 	.word	0x08002f70

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <BL_UART_Fetch_Host_Command>:
static uint8_t BL_Host_Buffer[BL_HOST_BUFFER_RX_LENGTH];
static uint8_t appExists = 0;

/************************************ Software Interfaces Implementations ************************************/
BL_Status BL_UART_Fetch_Host_Command(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	BL_Status Status = BL_NACK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_OK;
 80004da:	2300      	movs	r3, #0
 80004dc:	71bb      	strb	r3, [r7, #6]
	uint8_t Data_Length = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	717b      	strb	r3, [r7, #5]

	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 80004e2:	2264      	movs	r2, #100	; 0x64
 80004e4:	2100      	movs	r1, #0
 80004e6:	482d      	ldr	r0, [pc, #180]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 80004e8:	f002 fd16 	bl	8002f18 <memset>

	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295
 80004f0:	2201      	movs	r2, #1
 80004f2:	492a      	ldr	r1, [pc, #168]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 80004f4:	482a      	ldr	r0, [pc, #168]	; (80005a0 <BL_UART_Fetch_Host_Command+0xd0>)
 80004f6:	f002 f948 	bl	800278a <HAL_UART_Receive>
 80004fa:	4603      	mov	r3, r0
 80004fc:	71bb      	strb	r3, [r7, #6]

	if(HAL_Status != HAL_OK)
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d002      	beq.n	800050a <BL_UART_Fetch_Host_Command+0x3a>
	{
		Status = BL_NACK;
 8000504:	2300      	movs	r3, #0
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	e042      	b.n	8000590 <BL_UART_Fetch_Host_Command+0xc0>
	}
	else
	{
		Data_Length = BL_Host_Buffer[0];
 800050a:	4b24      	ldr	r3, [pc, #144]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	717b      	strb	r3, [r7, #5]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length, HAL_MAX_DELAY);
 8000510:	797b      	ldrb	r3, [r7, #5]
 8000512:	b29a      	uxth	r2, r3
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
 8000518:	4922      	ldr	r1, [pc, #136]	; (80005a4 <BL_UART_Fetch_Host_Command+0xd4>)
 800051a:	4821      	ldr	r0, [pc, #132]	; (80005a0 <BL_UART_Fetch_Host_Command+0xd0>)
 800051c:	f002 f935 	bl	800278a <HAL_UART_Receive>
 8000520:	4603      	mov	r3, r0
 8000522:	71bb      	strb	r3, [r7, #6]

		if(HAL_Status != HAL_OK)
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <BL_UART_Fetch_Host_Command+0x60>
		{
			Status = BL_NACK;
 800052a:	2300      	movs	r3, #0
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e02f      	b.n	8000590 <BL_UART_Fetch_Host_Command+0xc0>
		}
		else
		{
			switch(BL_Host_Buffer[1]){
 8000530:	4b1a      	ldr	r3, [pc, #104]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 8000532:	785b      	ldrb	r3, [r3, #1]
 8000534:	3b10      	subs	r3, #16
 8000536:	2b04      	cmp	r3, #4
 8000538:	d82a      	bhi.n	8000590 <BL_UART_Fetch_Host_Command+0xc0>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <BL_UART_Fetch_Host_Command+0x70>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	08000555 	.word	0x08000555
 8000544:	08000561 	.word	0x08000561
 8000548:	0800056d 	.word	0x0800056d
 800054c:	08000579 	.word	0x08000579
 8000550:	08000585 	.word	0x08000585
				case CBL_GET_CID_CMD:
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000554:	4811      	ldr	r0, [pc, #68]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 8000556:	f000 f827 	bl	80005a8 <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 800055a:	2301      	movs	r3, #1
 800055c:	71fb      	strb	r3, [r7, #7]
					break;
 800055e:	e017      	b.n	8000590 <BL_UART_Fetch_Host_Command+0xc0>
				case CBL_GET_RDP_STATUS_CMD:
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000560:	480e      	ldr	r0, [pc, #56]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 8000562:	f000 f864 	bl	800062e <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 8000566:	2301      	movs	r3, #1
 8000568:	71fb      	strb	r3, [r7, #7]
					break;
 800056a:	e011      	b.n	8000590 <BL_UART_Fetch_Host_Command+0xc0>
				case CBL_GO_TO_ADDR_CMD:
					Bootloader_Jump_To_User_App(BL_Host_Buffer);
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 800056e:	f000 f899 	bl	80006a4 <Bootloader_Jump_To_User_App>
					Status = BL_OK;
 8000572:	2301      	movs	r3, #1
 8000574:	71fb      	strb	r3, [r7, #7]
					break;
 8000576:	e00b      	b.n	8000590 <BL_UART_Fetch_Host_Command+0xc0>
				case CBL_FLASH_ERASE_CMD:
					Bootloader_Erase_Flash(BL_Host_Buffer);
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 800057a:	f000 f94a 	bl	8000812 <Bootloader_Erase_Flash>
					Status = BL_OK;
 800057e:	2301      	movs	r3, #1
 8000580:	71fb      	strb	r3, [r7, #7]
					break;
 8000582:	e005      	b.n	8000590 <BL_UART_Fetch_Host_Command+0xc0>
				case CBL_MEM_WRITE_CMD:
					Bootloader_Memory_Write(BL_Host_Buffer);
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <BL_UART_Fetch_Host_Command+0xcc>)
 8000586:	f000 f9d5 	bl	8000934 <Bootloader_Memory_Write>
					Status = BL_OK;
 800058a:	2301      	movs	r3, #1
 800058c:	71fb      	strb	r3, [r7, #7]
					break;
 800058e:	bf00      	nop
			}
		}
	}

	return Status;
 8000590:	79fb      	ldrb	r3, [r7, #7]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000028 	.word	0x20000028
 80005a0:	20000098 	.word	0x20000098
 80005a4:	20000029 	.word	0x20000029

080005a8 <Bootloader_Get_Chip_Identification_Number>:

/************************************    Static Functions Implementations  ************************************/
static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	81fb      	strh	r3, [r7, #14]
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80005c6:	8afb      	ldrh	r3, [r7, #22]
 80005c8:	3b04      	subs	r3, #4
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 80005d2:	8afb      	ldrh	r3, [r7, #22]
 80005d4:	3b04      	subs	r3, #4
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 fa30 	bl	8000a40 <Bootloader_CRC_Verify>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d10d      	bne.n	8000602 <Bootloader_Get_Chip_Identification_Number+0x5a>
		/* Get the MCU chip identification number */
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <Bootloader_Get_Chip_Identification_Number+0x68>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	81fb      	strh	r3, [r7, #14]
		/* Report chip identification number to HOST */
		Bootloader_Send_Data_To_Host((uint8_t *)&MCU_Identification_Number, 2);
 80005f4:	f107 030e 	add.w	r3, r7, #14
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fa70 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000600:	e001      	b.n	8000606 <Bootloader_Get_Chip_Identification_Number+0x5e>
		Bootloader_Send_NACK();
 8000602:	f000 fa5b 	bl	8000abc <Bootloader_Send_NACK>
}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	e0042000 	.word	0xe0042000

08000614 <CBL_STM32F401_Get_RDP_Level>:

static uint8_t CBL_STM32F401_Get_RDP_Level(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f80d 	bl	800163c <HAL_FLASHEx_OBGetConfig>

	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	b2db      	uxtb	r3, r3
}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	82fb      	strh	r3, [r7, #22]
	uint32_t Host_CRC32 = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b29b      	uxth	r3, r3
 8000648:	3301      	adds	r3, #1
 800064a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800064c:	8afb      	ldrh	r3, [r7, #22]
 800064e:	3b04      	subs	r3, #4
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000658:	8afb      	ldrh	r3, [r7, #22]
 800065a:	3b04      	subs	r3, #4
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f000 f9ed 	bl	8000a40 <Bootloader_CRC_Verify>
 8000666:	4603      	mov	r3, r0
 8000668:	2b01      	cmp	r3, #1
 800066a:	d115      	bne.n	8000698 <Bootloader_Read_Protection_Level+0x6a>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F401_Get_RDP_Level();
 800066c:	f7ff ffd2 	bl	8000614 <CBL_STM32F401_Get_RDP_Level>
 8000670:	4603      	mov	r3, r0
 8000672:	73fb      	strb	r3, [r7, #15]
		if(0xAA == RDP_Level)		 RDP_Level = 0x00;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	2baa      	cmp	r3, #170	; 0xaa
 8000678:	d102      	bne.n	8000680 <Bootloader_Read_Protection_Level+0x52>
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]
 800067e:	e004      	b.n	800068a <Bootloader_Read_Protection_Level+0x5c>
		else if(0x55 == RDP_Level)   RDP_Level = 0x01;
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b55      	cmp	r3, #85	; 0x55
 8000684:	d101      	bne.n	800068a <Bootloader_Read_Protection_Level+0x5c>
 8000686:	2301      	movs	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 800068a:	f107 030f 	add.w	r3, r7, #15
 800068e:	2101      	movs	r1, #1
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fa25 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
	}
	else{
		Bootloader_Send_NACK();
	}
}
 8000696:	e001      	b.n	800069c <Bootloader_Read_Protection_Level+0x6e>
		Bootloader_Send_NACK();
 8000698:	f000 fa10 	bl	8000abc <Bootloader_Send_NACK>
}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <Bootloader_Jump_To_User_App>:

static void Bootloader_Jump_To_User_App(uint8_t *Host_Buffer)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	83fb      	strh	r3, [r7, #30]
	uint32_t Host_CRC32 = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	3301      	adds	r3, #1
 80006bc:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80006be:	8bfb      	ldrh	r3, [r7, #30]
 80006c0:	3b04      	subs	r3, #4
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	61bb      	str	r3, [r7, #24]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 80006ca:	8bfb      	ldrh	r3, [r7, #30]
 80006cc:	3b04      	subs	r3, #4
 80006ce:	69ba      	ldr	r2, [r7, #24]
 80006d0:	4619      	mov	r1, r3
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f9b4 	bl	8000a40 <Bootloader_CRC_Verify>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d126      	bne.n	800072c <Bootloader_Jump_To_User_App+0x88>
	{
		if(0xFFFFFFFF != *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS))
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <Bootloader_Jump_To_User_App+0x94>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e6:	d019      	beq.n	800071c <Bootloader_Jump_To_User_App+0x78>
		{
			appExists = 1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <Bootloader_Jump_To_User_App+0x98>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	701a      	strb	r2, [r3, #0]
			/* Value of the main stack pointer of our main application */
			uint32_t MSP_Value = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS);
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <Bootloader_Jump_To_User_App+0x94>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	617b      	str	r3, [r7, #20]

			/* Reset Handler definition function of our main application */
			uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4));
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <Bootloader_Jump_To_User_App+0x9c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	613b      	str	r3, [r7, #16]

			/* Fetch the reset handler address of the user application */
			pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	60fb      	str	r3, [r7, #12]
 80006fe:	697b      	ldr	r3, [r7, #20]
 8000700:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	f383 8808 	msr	MSP, r3
}
 8000708:	bf00      	nop

			/* Set Main Stack Pointer */
			__set_MSP(MSP_Value);

			/* DeInitialize / Disable of modules */
			HAL_RCC_DeInit(); /* DeInitialize the RCC clock configuration to the default reset state. */
 800070a:	f001 fe95 	bl	8002438 <HAL_RCC_DeInit>
			                  /* Disable Maskable Interrupt */
			Bootloader_Send_Data_To_Host((uint8_t *)&appExists, 1);
 800070e:	2101      	movs	r1, #1
 8000710:	480a      	ldr	r0, [pc, #40]	; (800073c <Bootloader_Jump_To_User_App+0x98>)
 8000712:	f000 f9e5 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
			/* Jump to Application Reset Handler */
			ResetHandler_Address();
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4798      	blx	r3
		}
	}
	else{
		Bootloader_Send_NACK();
	}
}
 800071a:	e009      	b.n	8000730 <Bootloader_Jump_To_User_App+0x8c>
			appExists = 0;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <Bootloader_Jump_To_User_App+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
			Bootloader_Send_Data_To_Host((uint8_t *)&appExists, 1);
 8000722:	2101      	movs	r1, #1
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <Bootloader_Jump_To_User_App+0x98>)
 8000726:	f000 f9db 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
}
 800072a:	e001      	b.n	8000730 <Bootloader_Jump_To_User_App+0x8c>
		Bootloader_Send_NACK();
 800072c:	f000 f9c6 	bl	8000abc <Bootloader_Send_NACK>
}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	08008000 	.word	0x08008000
 800073c:	2000008c 	.word	0x2000008c
 8000740:	08008004 	.word	0x08008004

08000744 <Perform_Flash_Erase>:

static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	71fb      	strb	r3, [r7, #7]
 8000750:	4613      	mov	r3, r2
 8000752:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t SectorError = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]

	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER){
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	2b06      	cmp	r3, #6
 800076e:	d903      	bls.n	8000778 <Perform_Flash_Erase+0x34>
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000770:	2300      	movs	r3, #0
 8000772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000776:	e046      	b.n	8000806 <Perform_Flash_Erase+0xc2>
	}
	else{
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr))
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b05      	cmp	r3, #5
 800077c:	d902      	bls.n	8000784 <Perform_Flash_Erase+0x40>
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2bff      	cmp	r3, #255	; 0xff
 8000782:	d13d      	bne.n	8000800 <Perform_Flash_Erase+0xbc>
		{
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2bff      	cmp	r3, #255	; 0xff
 8000788:	d102      	bne.n	8000790 <Perform_Flash_Erase+0x4c>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 800078a:	2301      	movs	r3, #1
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	e012      	b.n	80007b6 <Perform_Flash_Erase+0x72>
			}
			else
			{
				/* User needs Sector erase */
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f1c3 0306 	rsb	r3, r3, #6
 8000796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(Number_Of_Sectors > Remaining_Sectors)
 800079a:	79ba      	ldrb	r2, [r7, #6]
 800079c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d902      	bls.n	80007aa <Perform_Flash_Erase+0x66>
				{
					Number_Of_Sectors = Remaining_Sectors;
 80007a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007a8:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }

				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	61fb      	str	r3, [r7, #28]
			}

			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 80007b6:	2301      	movs	r3, #1
 80007b8:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]

			/* Unlock the FLASH control register access */
			HAL_Status = HAL_FLASH_Unlock();
 80007be:	f000 fd5b 	bl	8001278 <HAL_FLASH_Unlock>
 80007c2:	4603      	mov	r3, r0
 80007c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80007c8:	f107 020c 	add.w	r2, r7, #12
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fec2 	bl	800155c <HAL_FLASHEx_Erase>
 80007d8:	4603      	mov	r3, r0
 80007da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_SUCCESSFUL_ERASE == SectorError){
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e4:	d103      	bne.n	80007ee <Perform_Flash_Erase+0xaa>
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 80007e6:	2303      	movs	r3, #3
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007ec:	e002      	b.n	80007f4 <Perform_Flash_Erase+0xb0>
			}
			else{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 80007ee:	2302      	movs	r3, #2
 80007f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			/* Locks the FLASH control register access */
			HAL_Status = HAL_FLASH_Lock();
 80007f4:	f000 fd62 	bl	80012bc <HAL_FLASH_Lock>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80007fe:	e002      	b.n	8000806 <Perform_Flash_Erase+0xc2>
		}
		else{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000800:	2302      	movs	r3, #2
 8000802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	return Sector_Validity_Status;
 8000806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800080a:	4618      	mov	r0, r3
 800080c:	3728      	adds	r7, #40	; 0x28
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b086      	sub	sp, #24
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b29b      	uxth	r3, r3
 800082c:	3301      	adds	r3, #1
 800082e:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000830:	8afb      	ldrh	r3, [r7, #22]
 8000832:	3b04      	subs	r3, #4
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	4413      	add	r3, r2
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32))
 800083c:	8afb      	ldrh	r3, [r7, #22]
 800083e:	3b04      	subs	r3, #4
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4619      	mov	r1, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f8fb 	bl	8000a40 <Bootloader_CRC_Verify>
 800084a:	4603      	mov	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	d116      	bne.n	800087e <Bootloader_Erase_Flash+0x6c>
	{
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(2, 4);
 8000850:	2104      	movs	r1, #4
 8000852:	2002      	movs	r0, #2
 8000854:	f7ff ff76 	bl	8000744 <Perform_Flash_Erase>
 8000858:	4603      	mov	r3, r0
 800085a:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status){
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	2b03      	cmp	r3, #3
 8000860:	d106      	bne.n	8000870 <Bootloader_Erase_Flash+0x5e>
			/* Report erase Passed */
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000862:	f107 030f 	add.w	r3, r7, #15
 8000866:	2101      	movs	r1, #1
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f939 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
	}
	else{
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 800086e:	e008      	b.n	8000882 <Bootloader_Erase_Flash+0x70>
			Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000870:	f107 030f 	add.w	r3, r7, #15
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f932 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
}
 800087c:	e001      	b.n	8000882 <Bootloader_Erase_Flash+0x70>
		Bootloader_Send_NACK();
 800087e:	f000 f91d 	bl	8000abc <Bootloader_Send_NACK>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <Flash_Memory_Write_Payload>:

static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 800088a:	b5b0      	push	{r4, r5, r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	4613      	mov	r3, r2
 8000896:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800089c:	2300      	movs	r3, #0
 800089e:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	82bb      	strh	r3, [r7, #20]

	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 80008a4:	f000 fce8 	bl	8001278 <HAL_FLASH_Unlock>
 80008a8:	4603      	mov	r3, r0
 80008aa:	75fb      	strb	r3, [r7, #23]

	if(HAL_Status != HAL_OK){
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <Flash_Memory_Write_Payload+0x2e>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008b2:	2300      	movs	r3, #0
 80008b4:	75bb      	strb	r3, [r7, #22]
 80008b6:	e023      	b.n	8000900 <Flash_Memory_Write_Payload+0x76>
	}
	else{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 80008b8:	2300      	movs	r3, #0
 80008ba:	82bb      	strh	r3, [r7, #20]
 80008bc:	e01c      	b.n	80008f8 <Flash_Memory_Write_Payload+0x6e>
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 80008be:	8aba      	ldrh	r2, [r7, #20]
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	18d1      	adds	r1, r2, r3
 80008c4:	8abb      	ldrh	r3, [r7, #20]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2200      	movs	r2, #0
 80008d0:	461c      	mov	r4, r3
 80008d2:	4615      	mov	r5, r2
 80008d4:	4622      	mov	r2, r4
 80008d6:	462b      	mov	r3, r5
 80008d8:	2000      	movs	r0, #0
 80008da:	f000 fc79 	bl	80011d0 <HAL_FLASH_Program>
 80008de:	4603      	mov	r3, r0
 80008e0:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK){
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d002      	beq.n	80008ee <Flash_Memory_Write_Payload+0x64>
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
				break;
 80008ec:	e008      	b.n	8000900 <Flash_Memory_Write_Payload+0x76>
			}
			else{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80008ee:	2301      	movs	r3, #1
 80008f0:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++){
 80008f2:	8abb      	ldrh	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	82bb      	strh	r3, [r7, #20]
 80008f8:	8aba      	ldrh	r2, [r7, #20]
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d3de      	bcc.n	80008be <Flash_Memory_Write_Payload+0x34>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000900:	7dbb      	ldrb	r3, [r7, #22]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d10f      	bne.n	8000926 <Flash_Memory_Write_Payload+0x9c>
 8000906:	7dfb      	ldrb	r3, [r7, #23]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d10c      	bne.n	8000926 <Flash_Memory_Write_Payload+0x9c>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 800090c:	f000 fcd6 	bl	80012bc <HAL_FLASH_Lock>
 8000910:	4603      	mov	r3, r0
 8000912:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK){
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <Flash_Memory_Write_Payload+0x96>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 800091a:	2300      	movs	r3, #0
 800091c:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 800091e:	e004      	b.n	800092a <Flash_Memory_Write_Payload+0xa0>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000920:	2301      	movs	r3, #1
 8000922:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK){
 8000924:	e001      	b.n	800092a <Flash_Memory_Write_Payload+0xa0>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000926:	2300      	movs	r3, #0
 8000928:	75bb      	strb	r3, [r7, #22]
	}

	return Flash_Payload_Write_Status;
 800092a:	7dbb      	ldrb	r3, [r7, #22]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bdb0      	pop	{r4, r5, r7, pc}

08000934 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 800094c:	2300      	movs	r3, #0
 800094e:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000950:	2300      	movs	r3, #0
 8000952:	727b      	strb	r3, [r7, #9]

	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	3301      	adds	r3, #1
 800095c:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800095e:	8afb      	ldrh	r3, [r7, #22]
 8000960:	3b04      	subs	r3, #4
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 800096a:	8afb      	ldrh	r3, [r7, #22]
 800096c:	3b04      	subs	r3, #4
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4619      	mov	r1, r3
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f000 f864 	bl	8000a40 <Bootloader_CRC_Verify>
 8000978:	4603      	mov	r3, r0
 800097a:	2b01      	cmp	r3, #1
 800097c:	d132      	bne.n	80009e4 <Bootloader_Memory_Write+0xb0>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000984:	60fb      	str	r3, [r7, #12]
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	799b      	ldrb	r3, [r3, #6]
 800098a:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 f82f 	bl	80009f0 <Host_Address_Verification>
 8000992:	4603      	mov	r3, r0
 8000994:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000996:	7abb      	ldrb	r3, [r7, #10]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d11a      	bne.n	80009d2 <Bootloader_Memory_Write+0x9e>
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3307      	adds	r3, #7
 80009a0:	7afa      	ldrb	r2, [r7, #11]
 80009a2:	b292      	uxth	r2, r2
 80009a4:	68f9      	ldr	r1, [r7, #12]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff6f 	bl	800088a <Flash_Memory_Write_Payload>
 80009ac:	4603      	mov	r3, r0
 80009ae:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 80009b0:	7a7b      	ldrb	r3, [r7, #9]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d106      	bne.n	80009c4 <Bootloader_Memory_Write+0x90>
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 80009b6:	f107 0309 	add.w	r3, r7, #9
 80009ba:	2101      	movs	r1, #1
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f88f 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
	}
	else{
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 80009c2:	e011      	b.n	80009e8 <Bootloader_Memory_Write+0xb4>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 80009c4:	f107 0309 	add.w	r3, r7, #9
 80009c8:	2101      	movs	r1, #1
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f888 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
}
 80009d0:	e00a      	b.n	80009e8 <Bootloader_Memory_Write+0xb4>
			Address_Verification = ADDRESS_IS_INVALID;
 80009d2:	2300      	movs	r3, #0
 80009d4:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 80009d6:	f107 030a 	add.w	r3, r7, #10
 80009da:	2101      	movs	r1, #1
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 f87f 	bl	8000ae0 <Bootloader_Send_Data_To_Host>
}
 80009e2:	e001      	b.n	80009e8 <Bootloader_Memory_Write+0xb4>
		Bootloader_Send_NACK();
 80009e4:	f000 f86a 	bl	8000abc <Bootloader_Send_NACK>
}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <Host_Address_Verification>:

static uint8_t Host_Address_Verification(uint32_t Jump_Address)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]

	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F401_SRAM1_END))
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a02:	d306      	bcc.n	8000a12 <Host_Address_Verification+0x22>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <Host_Address_Verification+0x4c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d802      	bhi.n	8000a12 <Host_Address_Verification+0x22>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	e00c      	b.n	8000a2c <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401_FLASH_END))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a18:	d306      	bcc.n	8000a28 <Host_Address_Verification+0x38>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8000a20:	d802      	bhi.n	8000a28 <Host_Address_Verification+0x38>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	e001      	b.n	8000a2c <Host_Address_Verification+0x3c>
	}
	else
	{
		Address_Verification = ADDRESS_IS_INVALID;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20010000 	.word	0x20010000

08000a40 <Bootloader_CRC_Verify>:

static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	75fb      	strb	r3, [r7, #23]
 8000a60:	e00f      	b.n	8000a82 <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)pData[Data_Counter];
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	2201      	movs	r2, #1
 8000a72:	4619      	mov	r1, r3
 8000a74:	4810      	ldr	r0, [pc, #64]	; (8000ab8 <Bootloader_CRC_Verify+0x78>)
 8000a76:	f000 fb80 	bl	800117a <HAL_CRC_Accumulate>
 8000a7a:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	75fb      	strb	r3, [r7, #23]
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d8eb      	bhi.n	8000a62 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
  __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <Bootloader_CRC_Verify+0x78>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <Bootloader_CRC_Verify+0x78>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0201 	orr.w	r2, r2, #1
 8000a98:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d102      	bne.n	8000aa8 <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	77fb      	strb	r3, [r7, #31]
 8000aa6:	e001      	b.n	8000aac <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	77fb      	strb	r3, [r7, #31]
	}

	return CRC_Status;
 8000aac:	7ffb      	ldrb	r3, [r7, #31]
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3720      	adds	r7, #32
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000090 	.word	0x20000090

08000abc <Bootloader_Send_NACK>:

static void Bootloader_Send_NACK(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 8000ac2:	23ab      	movs	r3, #171	; 0xab
 8000ac4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 8000ac6:	1df9      	adds	r1, r7, #7
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8000acc:	2201      	movs	r2, #1
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <Bootloader_Send_NACK+0x20>)
 8000ad0:	f001 fdd0 	bl	8002674 <HAL_UART_Transmit>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000098 	.word	0x20000098

08000ae0 <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <Bootloader_Send_Data_To_Host+0x24>)
 8000af6:	f001 fdbd 	bl	8002674 <HAL_UART_Transmit>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000098 	.word	0x20000098

08000b08 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_CRC_Init+0x20>)
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <MX_CRC_Init+0x24>)
 8000b10:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_CRC_Init+0x20>)
 8000b14:	f000 fb15 	bl	8001142 <HAL_CRC_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b1e:	f000 f8b3 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000090 	.word	0x20000090
 8000b2c:	40023000 	.word	0x40023000

08000b30 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0b      	ldr	r2, [pc, #44]	; (8000b6c <HAL_CRC_MspInit+0x3c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d10d      	bne.n	8000b5e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_CRC_MspInit+0x40>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a09      	ldr	r2, [pc, #36]	; (8000b70 <HAL_CRC_MspInit+0x40>)
 8000b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <HAL_CRC_MspInit+0x40>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023000 	.word	0x40023000
 8000b70:	40023800 	.word	0x40023800

08000b74 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_GPIO_Init+0x30>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <MX_GPIO_Init+0x30>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_GPIO_Init+0x30>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 f972 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f80a 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f7ff ffde 	bl	8000b74 <MX_GPIO_Init>
  MX_CRC_Init();
 8000bb8:	f7ff ffa6 	bl	8000b08 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000bbc:	f000 f8ce 	bl	8000d5c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BL_UART_Fetch_Host_Command();
 8000bc0:	f7ff fc86 	bl	80004d0 <BL_UART_Fetch_Host_Command>
  {
 8000bc4:	e7fc      	b.n	8000bc0 <main+0x18>
	...

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b094      	sub	sp, #80	; 0x50
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0320 	add.w	r3, r7, #32
 8000bd2:	2230      	movs	r2, #48	; 0x30
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f99e 	bl	8002f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <SystemClock_Config+0xb8>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <SystemClock_Config+0xb8>)
 8000bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <SystemClock_Config+0xb8>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <SystemClock_Config+0xbc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <SystemClock_Config+0xbc>)
 8000c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <SystemClock_Config+0xbc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c30:	2310      	movs	r3, #16
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 ffa3 	bl	8001b88 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c48:	f000 f81e 	bl	8000c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c50:	2300      	movs	r3, #0
 8000c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fa06 	bl	8002078 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c72:	f000 f809 	bl	8000c88 <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	; 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c8c:	b672      	cpsid	i
}
 8000c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <Error_Handler+0x8>
	...

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f902 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_USART1_UART_Init+0x50>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_USART1_UART_Init+0x4c>)
 8000d94:	f001 fc1e 	bl	80025d4 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d9e:	f7ff ff73 	bl	8000c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000098 	.word	0x20000098
 8000dac:	40011000 	.word	0x40011000

08000db0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <HAL_UART_MspInit+0x84>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d12c      	bne.n	8000e2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	6453      	str	r3, [r2, #68]	; 0x44
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_UART_MspInit+0x88>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_UART_MspInit+0x8c>)
 8000e28:	f000 fd2a 	bl	8001880 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40011000 	.word	0x40011000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e44:	f7ff ff78 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f002 f85b 	bl	8002f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fe99 	bl	8000ba8 <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e84:	08002fb0 	.word	0x08002fb0
  ldr r2, =_sbss
 8000e88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e8c:	20000104 	.word	0x20000104

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f90d 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff fee4 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f917 	bl	800112a <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295
 8000f14:	f000 f8ed 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200000e0 	.word	0x200000e0

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200000e0 	.word	0x200000e0

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff47 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff5c 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffb0 	bl	8001098 <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e00e      	b.n	8001172 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	795b      	ldrb	r3, [r3, #5]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d105      	bne.n	800116a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fce3 	bl	8000b30 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800117a:	b480      	push	{r7}
 800117c:	b087      	sub	sp, #28
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2202      	movs	r2, #2
 800118e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e00a      	b.n	80011ac <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	441a      	add	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d3f0      	bcc.n	8001196 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2201      	movs	r2, #1
 80011c0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80011c2:	693b      	ldr	r3, [r7, #16]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_FLASH_Program+0xa0>)
 80011e4:	7e1b      	ldrb	r3, [r3, #24]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_FLASH_Program+0x1e>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e03b      	b.n	8001266 <HAL_FLASH_Program+0x96>
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_FLASH_Program+0xa0>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011f8:	f000 f870 	bl	80012dc <FLASH_WaitForLastOperation>
 80011fc:	4603      	mov	r3, r0
 80011fe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d12b      	bne.n	800125e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800120c:	783b      	ldrb	r3, [r7, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f000 f91b 	bl	800144c <FLASH_Program_Byte>
 8001216:	e016      	b.n	8001246 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d105      	bne.n	800122a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800121e:	883b      	ldrh	r3, [r7, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f000 f8ee 	bl	8001404 <FLASH_Program_HalfWord>
 8001228:	e00d      	b.n	8001246 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d105      	bne.n	800123c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	4619      	mov	r1, r3
 8001234:	68b8      	ldr	r0, [r7, #8]
 8001236:	f000 f8c3 	bl	80013c0 <FLASH_Program_Word>
 800123a:	e004      	b.n	8001246 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800123c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001240:	68b8      	ldr	r0, [r7, #8]
 8001242:	f000 f88b 	bl	800135c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001246:	f24c 3050 	movw	r0, #50000	; 0xc350
 800124a:	f000 f847 	bl	80012dc <FLASH_WaitForLastOperation>
 800124e:	4603      	mov	r3, r0
 8001250:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_FLASH_Program+0xa4>)
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	4a07      	ldr	r2, [pc, #28]	; (8001274 <HAL_FLASH_Program+0xa4>)
 8001258:	f023 0301 	bic.w	r3, r3, #1
 800125c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_FLASH_Program+0xa0>)
 8001260:	2200      	movs	r2, #0
 8001262:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001264:	7dfb      	ldrb	r3, [r7, #23]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000e4 	.word	0x200000e4
 8001274:	40023c00 	.word	0x40023c00

08001278 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_FLASH_Unlock+0x38>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	da0b      	bge.n	80012a2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_FLASH_Unlock+0x38>)
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_FLASH_Unlock+0x3c>)
 800128e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <HAL_FLASH_Unlock+0x38>)
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_FLASH_Unlock+0x40>)
 8001294:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_FLASH_Unlock+0x38>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b00      	cmp	r3, #0
 800129c:	da01      	bge.n	80012a2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40023c00 	.word	0x40023c00
 80012b4:	45670123 	.word	0x45670123
 80012b8:	cdef89ab 	.word	0xcdef89ab

080012bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_FLASH_Lock+0x1c>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_FLASH_Lock+0x1c>)
 80012c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012ca:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40023c00 	.word	0x40023c00

080012dc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <FLASH_WaitForLastOperation+0x78>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80012ee:	f7ff fe37 	bl	8000f60 <HAL_GetTick>
 80012f2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80012f4:	e010      	b.n	8001318 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012fc:	d00c      	beq.n	8001318 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d007      	beq.n	8001314 <FLASH_WaitForLastOperation+0x38>
 8001304:	f7ff fe2c 	bl	8000f60 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	d201      	bcs.n	8001318 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e019      	b.n	800134c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <FLASH_WaitForLastOperation+0x7c>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e8      	bne.n	80012f6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <FLASH_WaitForLastOperation+0x7c>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <FLASH_WaitForLastOperation+0x7c>)
 8001332:	2201      	movs	r2, #1
 8001334:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <FLASH_WaitForLastOperation+0x7c>)
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001342:	f000 f8a5 	bl	8001490 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e000      	b.n	800134c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
  
}  
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000e4 	.word	0x200000e4
 8001358:	40023c00 	.word	0x40023c00

0800135c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <FLASH_Program_DoubleWord+0x60>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a13      	ldr	r2, [pc, #76]	; (80013bc <FLASH_Program_DoubleWord+0x60>)
 800136e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001372:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <FLASH_Program_DoubleWord+0x60>)
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	4a10      	ldr	r2, [pc, #64]	; (80013bc <FLASH_Program_DoubleWord+0x60>)
 800137a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800137e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <FLASH_Program_DoubleWord+0x60>)
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <FLASH_Program_DoubleWord+0x60>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001392:	f3bf 8f6f 	isb	sy
}
 8001396:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	000a      	movs	r2, r1
 80013a6:	2300      	movs	r3, #0
 80013a8:	68f9      	ldr	r1, [r7, #12]
 80013aa:	3104      	adds	r1, #4
 80013ac:	4613      	mov	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <FLASH_Program_Word+0x40>)
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <FLASH_Program_Word+0x40>)
 80013d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <FLASH_Program_Word+0x40>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <FLASH_Program_Word+0x40>)
 80013dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <FLASH_Program_Word+0x40>)
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <FLASH_Program_Word+0x40>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40023c00 	.word	0x40023c00

08001404 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <FLASH_Program_HalfWord+0x44>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <FLASH_Program_HalfWord+0x44>)
 8001416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800141a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <FLASH_Program_HalfWord+0x44>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	4a09      	ldr	r2, [pc, #36]	; (8001448 <FLASH_Program_HalfWord+0x44>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001426:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <FLASH_Program_HalfWord+0x44>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <FLASH_Program_HalfWord+0x44>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	801a      	strh	r2, [r3, #0]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00

0800144c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <FLASH_Program_Byte+0x40>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <FLASH_Program_Byte+0x40>)
 800145e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001462:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <FLASH_Program_Byte+0x40>)
 8001466:	4a09      	ldr	r2, [pc, #36]	; (800148c <FLASH_Program_Byte+0x40>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <FLASH_Program_Byte+0x40>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <FLASH_Program_Byte+0x40>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	701a      	strb	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023c00 	.word	0x40023c00

08001490 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001494:	4b2f      	ldr	r3, [pc, #188]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 80014aa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 80014ae:	2210      	movs	r2, #16
 80014b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80014b2:	4b28      	ldr	r3, [pc, #160]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	4a24      	ldr	r2, [pc, #144]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 80014c8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 80014cc:	2220      	movs	r2, #32
 80014ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 80014e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80014fa:	4b17      	ldr	r3, [pc, #92]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 8001504:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 800151a:	69db      	ldr	r3, [r3, #28]
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 8001522:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 8001526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800152a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001538:	4b07      	ldr	r3, [pc, #28]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	f043 0320 	orr.w	r3, r3, #32
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <FLASH_SetErrorCode+0xc8>)
 8001542:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <FLASH_SetErrorCode+0xc4>)
 8001546:	2202      	movs	r2, #2
 8001548:	60da      	str	r2, [r3, #12]
  }
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023c00 	.word	0x40023c00
 8001558:	200000e4 	.word	0x200000e4

0800155c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_FLASHEx_Erase+0xd8>)
 8001570:	7e1b      	ldrb	r3, [r3, #24]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_FLASHEx_Erase+0x1e>
 8001576:	2302      	movs	r3, #2
 8001578:	e058      	b.n	800162c <HAL_FLASHEx_Erase+0xd0>
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_FLASHEx_Erase+0xd8>)
 800157c:	2201      	movs	r2, #1
 800157e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001580:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001584:	f7ff feaa 	bl	80012dc <FLASH_WaitForLastOperation>
 8001588:	4603      	mov	r3, r0
 800158a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d148      	bne.n	8001624 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f04f 32ff 	mov.w	r2, #4294967295
 8001598:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d115      	bne.n	80015ce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f000 f868 	bl	8001684 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015b8:	f7ff fe90 	bl	80012dc <FLASH_WaitForLastOperation>
 80015bc:	4603      	mov	r3, r0
 80015be:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <HAL_FLASHEx_Erase+0xdc>)
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <HAL_FLASHEx_Erase+0xdc>)
 80015c6:	f023 0304 	bic.w	r3, r3, #4
 80015ca:	6113      	str	r3, [r2, #16]
 80015cc:	e028      	b.n	8001620 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	e01c      	b.n	8001610 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	68b8      	ldr	r0, [r7, #8]
 80015e0:	f000 f874 	bl	80016cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015e8:	f7ff fe78 	bl	80012dc <FLASH_WaitForLastOperation>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_FLASHEx_Erase+0xdc>)
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_FLASHEx_Erase+0xdc>)
 80015f6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80015fa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	601a      	str	r2, [r3, #0]
          break;
 8001608:	e00a      	b.n	8001620 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4413      	add	r3, r2
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	429a      	cmp	r2, r3
 800161e:	d3da      	bcc.n	80015d6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001620:	f000 f8e8 	bl	80017f4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_FLASHEx_Erase+0xd8>)
 8001626:	2200      	movs	r2, #0
 8001628:	761a      	strb	r2, [r3, #24]

  return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200000e4 	.word	0x200000e4
 8001638:	40023c00 	.word	0x40023c00

0800163c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	220f      	movs	r2, #15
 8001648:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800164a:	f000 f897 	bl	800177c <FLASH_OB_GetWRP>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001656:	f000 f89d 	bl	8001794 <FLASH_OB_GetRDP>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001662:	f000 f87b 	bl	800175c <FLASH_OB_GetUser>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800166e:	f000 f8b1 	bl	80017d4 <FLASH_OB_GetBOR>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	615a      	str	r2, [r3, #20]
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <FLASH_MassErase+0x44>)
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <FLASH_MassErase+0x44>)
 8001696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800169a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <FLASH_MassErase+0x44>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a09      	ldr	r2, [pc, #36]	; (80016c8 <FLASH_MassErase+0x44>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <FLASH_MassErase+0x44>)
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	4313      	orrs	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <FLASH_MassErase+0x44>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	6113      	str	r3, [r2, #16]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00

080016cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e010      	b.n	800170a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d103      	bne.n	80016f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80016ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e009      	b.n	800170a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d103      	bne.n	8001704 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80016fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e002      	b.n	800170a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001704:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001708:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 8001710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001714:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	490f      	ldr	r1, [pc, #60]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 8001728:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800172c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4313      	orrs	r3, r2
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <FLASH_Erase_Sector+0x8c>)
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	6113      	str	r3, [r2, #16]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40023c00 	.word	0x40023c00

0800175c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <FLASH_OB_GetUser+0x1c>)
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f023 031f 	bic.w	r3, r3, #31
 800176a:	b2db      	uxtb	r3, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023c00 	.word	0x40023c00

0800177c <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <FLASH_OB_GetWRP+0x14>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	b29b      	uxth	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	40023c16 	.word	0x40023c16

08001794 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800179a:	23aa      	movs	r3, #170	; 0xaa
 800179c:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <FLASH_OB_GetRDP+0x3c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2bcc      	cmp	r3, #204	; 0xcc
 80017a6:	d102      	bne.n	80017ae <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 80017a8:	23cc      	movs	r3, #204	; 0xcc
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	e009      	b.n	80017c2 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <FLASH_OB_GetRDP+0x3c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2baa      	cmp	r3, #170	; 0xaa
 80017b6:	d102      	bne.n	80017be <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 80017b8:	23aa      	movs	r3, #170	; 0xaa
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	e001      	b.n	80017c2 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80017be:	2355      	movs	r3, #85	; 0x55
 80017c0:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40023c15 	.word	0x40023c15

080017d4 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <FLASH_OB_GetBOR+0x1c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	b2db      	uxtb	r3, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023c14 	.word	0x40023c14

080017f4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <FLASH_FlushCaches+0x88>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001800:	2b00      	cmp	r3, #0
 8001802:	d017      	beq.n	8001834 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <FLASH_FlushCaches+0x88>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1c      	ldr	r2, [pc, #112]	; (800187c <FLASH_FlushCaches+0x88>)
 800180a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800180e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <FLASH_FlushCaches+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <FLASH_FlushCaches+0x88>)
 8001816:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <FLASH_FlushCaches+0x88>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a16      	ldr	r2, [pc, #88]	; (800187c <FLASH_FlushCaches+0x88>)
 8001822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001826:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <FLASH_FlushCaches+0x88>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <FLASH_FlushCaches+0x88>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <FLASH_FlushCaches+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d017      	beq.n	8001870 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <FLASH_FlushCaches+0x88>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <FLASH_FlushCaches+0x88>)
 8001846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800184a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <FLASH_FlushCaches+0x88>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <FLASH_FlushCaches+0x88>)
 8001852:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <FLASH_FlushCaches+0x88>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <FLASH_FlushCaches+0x88>)
 800185e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001862:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <FLASH_FlushCaches+0x88>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <FLASH_FlushCaches+0x88>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6013      	str	r3, [r2, #0]
  }
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	; 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e159      	b.n	8001b50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8148 	bne.w	8001b4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a2 	beq.w	8001b4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b57      	ldr	r3, [pc, #348]	; (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a56      	ldr	r2, [pc, #344]	; (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <HAL_GPIO_Init+0x2e8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x202>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_GPIO_Init+0x2f4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x1fe>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_GPIO_Init+0x2f8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x1fa>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a46      	ldr	r2, [pc, #280]	; (8001b7c <HAL_GPIO_Init+0x2fc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x1f6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a45      	ldr	r2, [pc, #276]	; (8001b80 <HAL_GPIO_Init+0x300>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x1f2>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e008      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a76:	2303      	movs	r3, #3
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x204>
 8001a82:	2300      	movs	r3, #0
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a94:	4935      	ldr	r1, [pc, #212]	; (8001b6c <HAL_GPIO_Init+0x2ec>)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aa2:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac6:	4a2f      	ldr	r2, [pc, #188]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001af0:	4a24      	ldr	r2, [pc, #144]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b1a:	4a1a      	ldr	r2, [pc, #104]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b44:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <HAL_GPIO_Init+0x304>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	f67f aea2 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020c00 	.word	0x40020c00
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40013c00 	.word	0x40013c00

08001b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e267      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d075      	beq.n	8001c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d00c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb2:	4b85      	ldr	r3, [pc, #532]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d112      	bne.n	8001be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bbe:	4b82      	ldr	r3, [pc, #520]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bca:	d10b      	bne.n	8001be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	4b7e      	ldr	r3, [pc, #504]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d05b      	beq.n	8001c90 <HAL_RCC_OscConfig+0x108>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d157      	bne.n	8001c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e242      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bec:	d106      	bne.n	8001bfc <HAL_RCC_OscConfig+0x74>
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xb0>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x98>
 8001c06:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6f      	ldr	r2, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6c      	ldr	r2, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xb0>
 8001c20:	4b69      	ldr	r3, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a68      	ldr	r2, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a65      	ldr	r2, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f98e 	bl	8000f60 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff f98a 	bl	8000f60 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e207      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xc0>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff f97a 	bl	8000f60 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff f976 	bl	8000f60 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1f3      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	4b51      	ldr	r3, [pc, #324]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0xe8>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x152>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1c7      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4937      	ldr	r1, [pc, #220]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_OscConfig+0x244>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f92f 	bl	8000f60 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff f92b 	bl	8000f60 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1a8      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4925      	ldr	r1, [pc, #148]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_OscConfig+0x244>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f90e 	bl	8000f60 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff f90a 	bl	8000f60 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e187      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d036      	beq.n	8001de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d016      	beq.n	8001da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_RCC_OscConfig+0x248>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff f8ee 	bl	8000f60 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff f8ea 	bl	8000f60 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e167      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x200>
 8001da6:	e01b      	b.n	8001de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_OscConfig+0x248>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f8d7 	bl	8000f60 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	e00e      	b.n	8001dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db6:	f7ff f8d3 	bl	8000f60 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d907      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e150      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	42470000 	.word	0x42470000
 8001dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ea      	bne.n	8001db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8097 	beq.w	8001f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b7d      	ldr	r3, [pc, #500]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a7c      	ldr	r2, [pc, #496]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b7a      	ldr	r3, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b77      	ldr	r3, [pc, #476]	; (8001ffc <HAL_RCC_OscConfig+0x474>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	4b74      	ldr	r3, [pc, #464]	; (8001ffc <HAL_RCC_OscConfig+0x474>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a73      	ldr	r2, [pc, #460]	; (8001ffc <HAL_RCC_OscConfig+0x474>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f893 	bl	8000f60 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff f88f 	bl	8000f60 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e10c      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x474>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2ea>
 8001e64:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x324>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x30c>
 8001e7a:	4b5f      	ldr	r3, [pc, #380]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a5e      	ldr	r2, [pc, #376]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	4b5c      	ldr	r3, [pc, #368]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a5b      	ldr	r2, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0x324>
 8001e94:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	4a54      	ldr	r2, [pc, #336]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d015      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f854 	bl	8000f60 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f850 	bl	8000f60 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0cb      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed2:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ee      	beq.n	8001ebc <HAL_RCC_OscConfig+0x334>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7ff f83e 	bl	8000f60 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7ff f83a 	bl	8000f60 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0b5      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ee      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a38      	ldr	r2, [pc, #224]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a1 	beq.w	8002068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f26:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d05c      	beq.n	8001fec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d141      	bne.n	8001fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <HAL_RCC_OscConfig+0x478>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff f80e 	bl	8000f60 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7ff f80a 	bl	8000f60 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e087      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	491b      	ldr	r1, [pc, #108]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x478>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7fe ffe3 	bl	8000f60 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe ffdf 	bl	8000f60 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e05c      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x416>
 8001fbc:	e054      	b.n	8002068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_RCC_OscConfig+0x478>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7fe ffcc 	bl	8000f60 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe ffc8 	bl	8000f60 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e045      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x444>
 8001fea:	e03d      	b.n	8002068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e038      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x4ec>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d028      	beq.n	8002064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d121      	bne.n	8002064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d11a      	bne.n	8002064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800203a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	3b01      	subs	r3, #1
 800204e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d107      	bne.n	8002064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0cc      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b68      	ldr	r3, [pc, #416]	; (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d90c      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b65      	ldr	r3, [pc, #404]	; (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b8      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020cc:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a58      	ldr	r2, [pc, #352]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a52      	ldr	r2, [pc, #328]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b50      	ldr	r3, [pc, #320]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	494d      	ldr	r1, [pc, #308]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d044      	beq.n	8002198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d119      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e07f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d003      	beq.n	8002136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002132:	2b03      	cmp	r3, #3
 8002134:	d107      	bne.n	8002146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e067      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002156:	4b37      	ldr	r3, [pc, #220]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f023 0203 	bic.w	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4934      	ldr	r1, [pc, #208]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002168:	f7fe fefa 	bl	8000f60 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	e00a      	b.n	8002186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7fe fef6 	bl	8000f60 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	; 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e04f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 020c 	and.w	r2, r3, #12
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	429a      	cmp	r2, r3
 8002196:	d1eb      	bne.n	8002170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d20c      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_RCC_ClockConfig+0x1b8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e032      	b.n	8002226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4916      	ldr	r1, [pc, #88]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021fe:	f000 f821 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002202:	4602      	mov	r2, r0
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	490a      	ldr	r1, [pc, #40]	; (8002238 <HAL_RCC_ClockConfig+0x1c0>)
 8002210:	5ccb      	ldrb	r3, [r1, r3]
 8002212:	fa22 f303 	lsr.w	r3, r2, r3
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fe5a 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023c00 	.word	0x40023c00
 8002234:	40023800 	.word	0x40023800
 8002238:	08002f88 	.word	0x08002f88
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002248:	b090      	sub	sp, #64	; 0x40
 800224a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	637b      	str	r3, [r7, #52]	; 0x34
 8002250:	2300      	movs	r3, #0
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225c:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	2b08      	cmp	r3, #8
 8002266:	d00d      	beq.n	8002284 <HAL_RCC_GetSysClockFreq+0x40>
 8002268:	2b08      	cmp	r3, #8
 800226a:	f200 80a1 	bhi.w	80023b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x34>
 8002272:	2b04      	cmp	r3, #4
 8002274:	d003      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x3a>
 8002276:	e09b      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800227a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800227c:	e09b      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800227e:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002280:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002282:	e098      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002284:	4b4f      	ldr	r3, [pc, #316]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228e:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d028      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	2200      	movs	r2, #0
 80022a2:	623b      	str	r3, [r7, #32]
 80022a4:	627a      	str	r2, [r7, #36]	; 0x24
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022ac:	2100      	movs	r1, #0
 80022ae:	4b47      	ldr	r3, [pc, #284]	; (80023cc <HAL_RCC_GetSysClockFreq+0x188>)
 80022b0:	fb03 f201 	mul.w	r2, r3, r1
 80022b4:	2300      	movs	r3, #0
 80022b6:	fb00 f303 	mul.w	r3, r0, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	4a43      	ldr	r2, [pc, #268]	; (80023cc <HAL_RCC_GetSysClockFreq+0x188>)
 80022be:	fba0 1202 	umull	r1, r2, r0, r2
 80022c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c4:	460a      	mov	r2, r1
 80022c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80022c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ca:	4413      	add	r3, r2
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d0:	2200      	movs	r2, #0
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	61fa      	str	r2, [r7, #28]
 80022d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022de:	f7fd ff79 	bl	80001d4 <__aeabi_uldivmod>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4613      	mov	r3, r2
 80022e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ea:	e053      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	2200      	movs	r2, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	617a      	str	r2, [r7, #20]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022fe:	f04f 0b00 	mov.w	fp, #0
 8002302:	4652      	mov	r2, sl
 8002304:	465b      	mov	r3, fp
 8002306:	f04f 0000 	mov.w	r0, #0
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	0159      	lsls	r1, r3, #5
 8002310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002314:	0150      	lsls	r0, r2, #5
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	ebb2 080a 	subs.w	r8, r2, sl
 800231e:	eb63 090b 	sbc.w	r9, r3, fp
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800232e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002332:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002336:	ebb2 0408 	subs.w	r4, r2, r8
 800233a:	eb63 0509 	sbc.w	r5, r3, r9
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	00eb      	lsls	r3, r5, #3
 8002348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800234c:	00e2      	lsls	r2, r4, #3
 800234e:	4614      	mov	r4, r2
 8002350:	461d      	mov	r5, r3
 8002352:	eb14 030a 	adds.w	r3, r4, sl
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	eb45 030b 	adc.w	r3, r5, fp
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800236a:	4629      	mov	r1, r5
 800236c:	028b      	lsls	r3, r1, #10
 800236e:	4621      	mov	r1, r4
 8002370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002374:	4621      	mov	r1, r4
 8002376:	028a      	lsls	r2, r1, #10
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237e:	2200      	movs	r2, #0
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	60fa      	str	r2, [r7, #12]
 8002384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002388:	f7fd ff24 	bl	80001d4 <__aeabi_uldivmod>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4613      	mov	r3, r2
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	3301      	adds	r3, #1
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3740      	adds	r7, #64	; 0x40
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800
 80023c8:	00f42400 	.word	0x00f42400
 80023cc:	017d7840 	.word	0x017d7840

080023d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023ec:	f7ff fff0 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	0a9b      	lsrs	r3, r3, #10
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4903      	ldr	r1, [pc, #12]	; (800240c <HAL_RCC_GetPCLK1Freq+0x24>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	08002f98 	.word	0x08002f98

08002410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002414:	f7ff ffdc 	bl	80023d0 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0b5b      	lsrs	r3, r3, #13
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	08002f98 	.word	0x08002f98

08002438 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800243e:	f7fe fd8f 	bl	8000f60 <HAL_GetTick>
 8002442:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002444:	4b5d      	ldr	r3, [pc, #372]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a5c      	ldr	r2, [pc, #368]	; (80025bc <HAL_RCC_DeInit+0x184>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe fd85 	bl	8000f60 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0a7      	b.n	80025b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002464:	4b55      	ldr	r3, [pc, #340]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002470:	4b52      	ldr	r3, [pc, #328]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800247c:	f7fe fd70 	bl	8000f60 <HAL_GetTick>
 8002480:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002482:	4b4e      	ldr	r3, [pc, #312]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7fe fd69 	bl	8000f60 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e089      	b.n	80025b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_DeInit+0x184>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024ac:	f7fe fd58 	bl	8000f60 <HAL_GetTick>
 80024b0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80024b2:	4b42      	ldr	r3, [pc, #264]	; (80025bc <HAL_RCC_DeInit+0x184>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a41      	ldr	r2, [pc, #260]	; (80025bc <HAL_RCC_DeInit+0x184>)
 80024b8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80024bc:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7fe fd4e 	bl	8000f60 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e070      	b.n	80025b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <HAL_RCC_DeInit+0x184>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80024de:	f7fe fd3f 	bl	8000f60 <HAL_GetTick>
 80024e2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024e4:	4b35      	ldr	r3, [pc, #212]	; (80025bc <HAL_RCC_DeInit+0x184>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a34      	ldr	r2, [pc, #208]	; (80025bc <HAL_RCC_DeInit+0x184>)
 80024ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ee:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f2:	f7fe fd35 	bl	8000f60 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e057      	b.n	80025b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002510:	f7fe fd26 	bl	8000f60 <HAL_GetTick>
 8002514:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a28      	ldr	r2, [pc, #160]	; (80025bc <HAL_RCC_DeInit+0x184>)
 800251c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002520:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002524:	f7fe fd1c 	bl	8000f60 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e03e      	b.n	80025b4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002544:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_RCC_DeInit+0x188>)
 8002546:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002548:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_DeInit+0x184>)
 800254a:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <HAL_RCC_DeInit+0x18c>)
 800254c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002556:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800255a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_RCC_DeInit+0x184>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4a16      	ldr	r2, [pc, #88]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002562:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002566:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_RCC_DeInit+0x184>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_RCC_DeInit+0x184>)
 800256e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002572:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002574:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4a10      	ldr	r2, [pc, #64]	; (80025bc <HAL_RCC_DeInit+0x184>)
 800257a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800257e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <HAL_RCC_DeInit+0x184>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	4a0a      	ldr	r2, [pc, #40]	; (80025bc <HAL_RCC_DeInit+0x184>)
 8002592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002596:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_DeInit+0x190>)
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <HAL_RCC_DeInit+0x194>)
 800259c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCC_DeInit+0x198>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fc98 	bl	8000ed8 <HAL_InitTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80025b2:	2300      	movs	r3, #0
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40023800 	.word	0x40023800
 80025c0:	04003010 	.word	0x04003010
 80025c4:	20003000 	.word	0x20003000
 80025c8:	20000000 	.word	0x20000000
 80025cc:	00f42400 	.word	0x00f42400
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e042      	b.n	800266c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fbd8 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2224      	movs	r2, #36	; 0x24
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fa09 	bl	8002a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800262c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800263c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800264c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b20      	cmp	r3, #32
 8002692:	d175      	bne.n	8002780 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_UART_Transmit+0x2c>
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e06e      	b.n	8002782 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2221      	movs	r2, #33	; 0x21
 80026ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026b2:	f7fe fc55 	bl	8000f60 <HAL_GetTick>
 80026b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	88fa      	ldrh	r2, [r7, #6]
 80026c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026cc:	d108      	bne.n	80026e0 <HAL_UART_Transmit+0x6c>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d104      	bne.n	80026e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e003      	b.n	80026e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026e8:	e02e      	b.n	8002748 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f8df 	bl	80028b8 <UART_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e03a      	b.n	8002782 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10b      	bne.n	800272a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002720:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3302      	adds	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e007      	b.n	800273a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	3301      	adds	r3, #1
 8002738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1cb      	bne.n	80026ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2200      	movs	r2, #0
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f8ab 	bl	80028b8 <UART_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e006      	b.n	8002782 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e000      	b.n	8002782 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b08a      	sub	sp, #40	; 0x28
 800278e:	af02      	add	r7, sp, #8
 8002790:	60f8      	str	r0, [r7, #12]
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	4613      	mov	r3, r2
 8002798:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	f040 8081 	bne.w	80028ae <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Receive+0x2e>
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e079      	b.n	80028b0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2222      	movs	r2, #34	; 0x22
 80027c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027d0:	f7fe fbc6 	bl	8000f60 <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ea:	d108      	bne.n	80027fe <HAL_UART_Receive+0x74>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	e003      	b.n	8002806 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002806:	e047      	b.n	8002898 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2200      	movs	r2, #0
 8002810:	2120      	movs	r1, #32
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f850 	bl	80028b8 <UART_WaitOnFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e042      	b.n	80028b0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10c      	bne.n	800284a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283c:	b29a      	uxth	r2, r3
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	3302      	adds	r3, #2
 8002846:	61bb      	str	r3, [r7, #24]
 8002848:	e01f      	b.n	800288a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002852:	d007      	beq.n	8002864 <HAL_UART_Receive+0xda>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_UART_Receive+0xe8>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	701a      	strb	r2, [r3, #0]
 8002870:	e008      	b.n	8002884 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800287e:	b2da      	uxtb	r2, r3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	3301      	adds	r3, #1
 8002888:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1b2      	bne.n	8002808 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
  }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c8:	e03b      	b.n	8002942 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d037      	beq.n	8002942 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d2:	f7fe fb45 	bl	8000f60 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d302      	bcc.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e03a      	b.n	8002962 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d023      	beq.n	8002942 <UART_WaitOnFlagUntilTimeout+0x8a>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d020      	beq.n	8002942 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d01d      	beq.n	8002942 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d116      	bne.n	8002942 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f81d 	bl	800296a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2208      	movs	r2, #8
 8002934:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	4013      	ands	r3, r2
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	bf0c      	ite	eq
 8002952:	2301      	moveq	r3, #1
 8002954:	2300      	movne	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	429a      	cmp	r2, r3
 800295e:	d0b4      	beq.n	80028ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800296a:	b480      	push	{r7}
 800296c:	b095      	sub	sp, #84	; 0x54
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	330c      	adds	r3, #12
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	e853 3f00 	ldrex	r3, [r3]
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002992:	643a      	str	r2, [r7, #64]	; 0x40
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1e5      	bne.n	8002972 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3314      	adds	r3, #20
 80029ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	e853 3f00 	ldrex	r3, [r3]
 80029b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f023 0301 	bic.w	r3, r3, #1
 80029bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e5      	bne.n	80029a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d119      	bne.n	8002a16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	330c      	adds	r3, #12
 80029e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	e853 3f00 	ldrex	r3, [r3]
 80029f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f023 0310 	bic.w	r3, r3, #16
 80029f8:	647b      	str	r3, [r7, #68]	; 0x44
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a02:	61ba      	str	r2, [r7, #24]
 8002a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a06:	6979      	ldr	r1, [r7, #20]
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	e841 2300 	strex	r3, r2, [r1]
 8002a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1e5      	bne.n	80029e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a24:	bf00      	nop
 8002a26:	3754      	adds	r7, #84	; 0x54
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b0c0      	sub	sp, #256	; 0x100
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	68d9      	ldr	r1, [r3, #12]
 8002a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	ea40 0301 	orr.w	r3, r0, r1
 8002a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a88:	f021 010c 	bic.w	r1, r1, #12
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a96:	430b      	orrs	r3, r1
 8002a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aaa:	6999      	ldr	r1, [r3, #24]
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	ea40 0301 	orr.w	r3, r0, r1
 8002ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b8f      	ldr	r3, [pc, #572]	; (8002cfc <UART_SetConfig+0x2cc>)
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d005      	beq.n	8002ad0 <UART_SetConfig+0xa0>
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4b8d      	ldr	r3, [pc, #564]	; (8002d00 <UART_SetConfig+0x2d0>)
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d104      	bne.n	8002ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ad0:	f7ff fc9e 	bl	8002410 <HAL_RCC_GetPCLK2Freq>
 8002ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ad8:	e003      	b.n	8002ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ada:	f7ff fc85 	bl	80023e8 <HAL_RCC_GetPCLK1Freq>
 8002ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aec:	f040 810c 	bne.w	8002d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002af4:	2200      	movs	r2, #0
 8002af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b02:	4622      	mov	r2, r4
 8002b04:	462b      	mov	r3, r5
 8002b06:	1891      	adds	r1, r2, r2
 8002b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b0a:	415b      	adcs	r3, r3
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b12:	4621      	mov	r1, r4
 8002b14:	eb12 0801 	adds.w	r8, r2, r1
 8002b18:	4629      	mov	r1, r5
 8002b1a:	eb43 0901 	adc.w	r9, r3, r1
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b32:	4690      	mov	r8, r2
 8002b34:	4699      	mov	r9, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	eb18 0303 	adds.w	r3, r8, r3
 8002b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b40:	462b      	mov	r3, r5
 8002b42:	eb49 0303 	adc.w	r3, r9, r3
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b5e:	460b      	mov	r3, r1
 8002b60:	18db      	adds	r3, r3, r3
 8002b62:	653b      	str	r3, [r7, #80]	; 0x50
 8002b64:	4613      	mov	r3, r2
 8002b66:	eb42 0303 	adc.w	r3, r2, r3
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b74:	f7fd fb2e 	bl	80001d4 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	011c      	lsls	r4, r3, #4
 8002b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	1891      	adds	r1, r2, r2
 8002b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ba0:	415b      	adcs	r3, r3
 8002ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ba8:	4641      	mov	r1, r8
 8002baa:	eb12 0a01 	adds.w	sl, r2, r1
 8002bae:	4649      	mov	r1, r9
 8002bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc8:	4692      	mov	sl, r2
 8002bca:	469b      	mov	fp, r3
 8002bcc:	4643      	mov	r3, r8
 8002bce:	eb1a 0303 	adds.w	r3, sl, r3
 8002bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bd6:	464b      	mov	r3, r9
 8002bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	18db      	adds	r3, r3, r3
 8002bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	eb42 0303 	adc.w	r3, r2, r3
 8002c00:	647b      	str	r3, [r7, #68]	; 0x44
 8002c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c0a:	f7fd fae3 	bl	80001d4 <__aeabi_uldivmod>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002c16:	fba3 2301 	umull	r2, r3, r3, r1
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2264      	movs	r2, #100	; 0x64
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	1acb      	subs	r3, r1, r3
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c2a:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c38:	441c      	add	r4, r3
 8002c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	1891      	adds	r1, r2, r2
 8002c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c54:	415b      	adcs	r3, r3
 8002c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	1851      	adds	r1, r2, r1
 8002c60:	6339      	str	r1, [r7, #48]	; 0x30
 8002c62:	4649      	mov	r1, r9
 8002c64:	414b      	adcs	r3, r1
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c74:	4659      	mov	r1, fp
 8002c76:	00cb      	lsls	r3, r1, #3
 8002c78:	4651      	mov	r1, sl
 8002c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c7e:	4651      	mov	r1, sl
 8002c80:	00ca      	lsls	r2, r1, #3
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	4642      	mov	r2, r8
 8002c8a:	189b      	adds	r3, r3, r2
 8002c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c90:	464b      	mov	r3, r9
 8002c92:	460a      	mov	r2, r1
 8002c94:	eb42 0303 	adc.w	r3, r2, r3
 8002c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	18db      	adds	r3, r3, r3
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cc6:	f7fd fa85 	bl	80001d4 <__aeabi_uldivmod>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	2164      	movs	r1, #100	; 0x64
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3332      	adds	r3, #50	; 0x32
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <UART_SetConfig+0x2d4>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	f003 0207 	and.w	r2, r3, #7
 8002cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4422      	add	r2, r4
 8002cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cf8:	e106      	b.n	8002f08 <UART_SetConfig+0x4d8>
 8002cfa:	bf00      	nop
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40011400 	.word	0x40011400
 8002d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d1a:	4642      	mov	r2, r8
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	1891      	adds	r1, r2, r2
 8002d20:	6239      	str	r1, [r7, #32]
 8002d22:	415b      	adcs	r3, r3
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d2a:	4641      	mov	r1, r8
 8002d2c:	1854      	adds	r4, r2, r1
 8002d2e:	4649      	mov	r1, r9
 8002d30:	eb43 0501 	adc.w	r5, r3, r1
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	00eb      	lsls	r3, r5, #3
 8002d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d42:	00e2      	lsls	r2, r4, #3
 8002d44:	4614      	mov	r4, r2
 8002d46:	461d      	mov	r5, r3
 8002d48:	4643      	mov	r3, r8
 8002d4a:	18e3      	adds	r3, r4, r3
 8002d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d50:	464b      	mov	r3, r9
 8002d52:	eb45 0303 	adc.w	r3, r5, r3
 8002d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d76:	4629      	mov	r1, r5
 8002d78:	008b      	lsls	r3, r1, #2
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d80:	4621      	mov	r1, r4
 8002d82:	008a      	lsls	r2, r1, #2
 8002d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d88:	f7fd fa24 	bl	80001d4 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002d92:	fba3 2302 	umull	r2, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	011c      	lsls	r4, r3, #4
 8002d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	61b9      	str	r1, [r7, #24]
 8002db4:	415b      	adcs	r3, r3
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	1851      	adds	r1, r2, r1
 8002dc0:	6139      	str	r1, [r7, #16]
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	414b      	adcs	r3, r1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	00cb      	lsls	r3, r1, #3
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dde:	4651      	mov	r1, sl
 8002de0:	00ca      	lsls	r2, r1, #3
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	4642      	mov	r2, r8
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002df0:	464b      	mov	r3, r9
 8002df2:	460a      	mov	r2, r1
 8002df4:	eb42 0303 	adc.w	r3, r2, r3
 8002df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e14:	4649      	mov	r1, r9
 8002e16:	008b      	lsls	r3, r1, #2
 8002e18:	4641      	mov	r1, r8
 8002e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e1e:	4641      	mov	r1, r8
 8002e20:	008a      	lsls	r2, r1, #2
 8002e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e26:	f7fd f9d5 	bl	80001d4 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002e32:	fba3 2301 	umull	r2, r3, r3, r1
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2264      	movs	r2, #100	; 0x64
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	1acb      	subs	r3, r1, r3
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	3332      	adds	r3, #50	; 0x32
 8002e44:	4a33      	ldr	r2, [pc, #204]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e50:	441c      	add	r4, r3
 8002e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e56:	2200      	movs	r2, #0
 8002e58:	673b      	str	r3, [r7, #112]	; 0x70
 8002e5a:	677a      	str	r2, [r7, #116]	; 0x74
 8002e5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	1891      	adds	r1, r2, r2
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	415b      	adcs	r3, r3
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e70:	4641      	mov	r1, r8
 8002e72:	1851      	adds	r1, r2, r1
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	4649      	mov	r1, r9
 8002e78:	414b      	adcs	r3, r1
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e88:	4659      	mov	r1, fp
 8002e8a:	00cb      	lsls	r3, r1, #3
 8002e8c:	4651      	mov	r1, sl
 8002e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e92:	4651      	mov	r1, sl
 8002e94:	00ca      	lsls	r2, r1, #3
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4642      	mov	r2, r8
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea2:	464b      	mov	r3, r9
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	eb42 0303 	adc.w	r3, r2, r3
 8002eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8002eb6:	667a      	str	r2, [r7, #100]	; 0x64
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	008b      	lsls	r3, r1, #2
 8002ec8:	4641      	mov	r1, r8
 8002eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ece:	4641      	mov	r1, r8
 8002ed0:	008a      	lsls	r2, r1, #2
 8002ed2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ed6:	f7fd f97d 	bl	80001d4 <__aeabi_uldivmod>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	2164      	movs	r1, #100	; 0x64
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	3332      	adds	r3, #50	; 0x32
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <UART_SetConfig+0x4e4>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	095b      	lsrs	r3, r3, #5
 8002efa:	f003 020f 	and.w	r2, r3, #15
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4422      	add	r2, r4
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f14:	51eb851f 	.word	0x51eb851f

08002f18 <memset>:
 8002f18:	4402      	add	r2, r0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <memset+0xa>
 8002f20:	4770      	bx	lr
 8002f22:	f803 1b01 	strb.w	r1, [r3], #1
 8002f26:	e7f9      	b.n	8002f1c <memset+0x4>

08002f28 <__libc_init_array>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4d0d      	ldr	r5, [pc, #52]	; (8002f60 <__libc_init_array+0x38>)
 8002f2c:	4c0d      	ldr	r4, [pc, #52]	; (8002f64 <__libc_init_array+0x3c>)
 8002f2e:	1b64      	subs	r4, r4, r5
 8002f30:	10a4      	asrs	r4, r4, #2
 8002f32:	2600      	movs	r6, #0
 8002f34:	42a6      	cmp	r6, r4
 8002f36:	d109      	bne.n	8002f4c <__libc_init_array+0x24>
 8002f38:	4d0b      	ldr	r5, [pc, #44]	; (8002f68 <__libc_init_array+0x40>)
 8002f3a:	4c0c      	ldr	r4, [pc, #48]	; (8002f6c <__libc_init_array+0x44>)
 8002f3c:	f000 f818 	bl	8002f70 <_init>
 8002f40:	1b64      	subs	r4, r4, r5
 8002f42:	10a4      	asrs	r4, r4, #2
 8002f44:	2600      	movs	r6, #0
 8002f46:	42a6      	cmp	r6, r4
 8002f48:	d105      	bne.n	8002f56 <__libc_init_array+0x2e>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f50:	4798      	blx	r3
 8002f52:	3601      	adds	r6, #1
 8002f54:	e7ee      	b.n	8002f34 <__libc_init_array+0xc>
 8002f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5a:	4798      	blx	r3
 8002f5c:	3601      	adds	r6, #1
 8002f5e:	e7f2      	b.n	8002f46 <__libc_init_array+0x1e>
 8002f60:	08002fa8 	.word	0x08002fa8
 8002f64:	08002fa8 	.word	0x08002fa8
 8002f68:	08002fa8 	.word	0x08002fa8
 8002f6c:	08002fac 	.word	0x08002fac

08002f70 <_init>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr

08002f7c <_fini>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr
